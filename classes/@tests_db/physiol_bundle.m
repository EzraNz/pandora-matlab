function a_pbundle = physiol_bundle(phys_dball, phys_dataset, props)
  
% physiol_bundle - Create a physiol_bundle from a raw physiology database.
%
% Usage:
% a_pbundle = physiol_bundle(phys_dball, phys_dataset, props)
%
% Description:
%   Removes small bias currents, calculates input resistance by averaging
% negative CIP traces, averages multiple traces with similar treatments,
% selects certain CIP levels collapses its rows to create a
% one-neuron-per-pow database. It includes post-DB calculated columns
% such as rate ratios between spont and recovery periods.
%
% Parameters:
%   phys_dball: A raw database obtained by loading traces from the tracesets.
%   phys_dataset: Dataset object passed to physiol_bundle.
%   props: Optional parameters.
%	weedCols: Cell array of parameter columns to be weed-out before averaging rows
%		that are same w.r.t other parameters.
%		(default={'pulseOn', 'pulseOff', 'traceEnd', 'pAbias', 'ItemIndex'}).
%	drugCols: Cell array of drug names that need to be zero for the
%		control db (default={'TTX', 'Apamin', 'EBIO', 'XE991', 'Cadmium', 'drug_4AP'}).
%
% Returns:
%	phys_joined_db: Final one row per cip and neuron db.
%	phys_joined_control_db: Rows where all drug treatments are zero.
%	phys_db: Original db only with parameter and including the weedCols.
%
% See also: physiol_bundle, params_tests_db
%
% $Id: physiol_bundle.m,v 1.4 2006/02/08 23:18:29 cengiz Exp $
% Author: Cengiz Gunay <cgunay@emory.edu>, 2007/12/21

% Weed out any traces with |bias| > 30 pA
phys_db_small_bias = phys_dball(phys_dball(:, 'pAbias') > -30 & phys_dball(:, 'pAbias') < 30, :);

% Choose some CIPs
phys_db_limitedcip = ...
    phys_db_small_bias(anyRows(phys_db_small_bias(:, 'pAcip'), ...
                               [-100; -60; -40; -20; 0; 40; 100; 200]), :);

% remove unnecessary params before averaging (TODO: this may need to be
% optional)
if isfield(props, 'weedCols')
  weed_cols = props.weedCols;
else
  weed_cols = {'pulseOn', 'pulseOff', 'traceEnd', 'pAbias', 'ItemIndex'};
end
phys_db_limitedcip = ...
    delColumns(phys_db_limitedcip, weed_cols);

% Add some new measures
phys_db_limitedcip_addedcols3 = addPostDBColumns(phys_db_limitedcip);

% Use CIP levels -20 to -60 for averaging input resistance and membrane
%time constants. Average across pAcip, so remove it, too.
phys_inputres_mean_db = ...
    meanDuplicateParams(delColumns(phys_db_limitedcip_addedcols3(...
      phys_db_limitedcip_addedcols3(:, 'pAcip') > -100 & ...
      phys_db_limitedcip_addedcols3(:, 'pAcip') <= -20, :), ...
                                   {'pAcip'}));

% Average traces with same CIP levels
phys_mean_db = meanDuplicateParams(phys_db_limitedcip_addedcols3);

% Merge measures from multiple CIP levels into one row for each neuron
spont_spike_tests  = ...
    {'SpontSpikeAmplitudeMean', ...
     'SpontSpikeAmplitudeMode', ...
     'SpontSpikeAmplitudeSTD', ...
     'SpontSpikeBaseWidthMean', ...
     'SpontSpikeBaseWidthMode', ...
     'SpontSpikeBaseWidthSTD', ...
     'SpontSpikeFallTimeMean', ...
     'SpontSpikeFallTimeMode', ...
     'SpontSpikeFallTimeSTD', ...
     'SpontSpikeHalfWidthMean', ...
     'SpontSpikeHalfWidthMode', ...
     'SpontSpikeHalfWidthSTD', ...
     'SpontSpikeFixVWidthMean', ...
     'SpontSpikeFixVWidthMode', ...
     'SpontSpikeFixVWidthSTD', ...
     'SpontSpikeInitVmBySlopeMean', ...
     'SpontSpikeInitVmBySlopeMode', ...
     'SpontSpikeInitVmBySlopeSTD', ...
     'SpontSpikeInitVmMean', ...
     'SpontSpikeInitVmMode', ...
     'SpontSpikeInitVmSTD', ...
     'SpontSpikeMaxAHPMean', ...
     'SpontSpikeMaxAHPMode', ...
     'SpontSpikeMaxAHPSTD', ...
     'SpontSpikeMaxVmSlopeMean', ...
     'SpontSpikeMaxVmSlopeMode', ...
     'SpontSpikeMaxVmSlopeSTD', ...
     'SpontSpikeMinTimeMean', ...
     'SpontSpikeMinTimeMode', ...
     'SpontSpikeMinTimeSTD', ...
     'SpontSpikeRiseTimeMean', ...
     'SpontSpikeRiseTimeMode', ...
     'SpontSpikeRiseTimeSTD'};

pulse_spike_tests  = ...
    {'PulseSpikeAmplitudeMean', ...
     'PulseSpikeAmplitudeMode', ...
     'PulseSpikeAmplitudeSTD', ...
     'PulseSpikeBaseWidthMean', ...
     'PulseSpikeBaseWidthMode', ...
     'PulseSpikeBaseWidthSTD', ...
     'PulseSpikeFallTimeMean', ...
     'PulseSpikeFallTimeMode', ...
     'PulseSpikeFallTimeSTD', ...
     'PulseSpikeHalfWidthMean', ...
     'PulseSpikeHalfWidthMode', ...
     'PulseSpikeHalfWidthSTD', ...
     'PulseSpikeFixVWidthMean', ...
     'PulseSpikeFixVWidthMode', ...
     'PulseSpikeFixVWidthSTD', ...     
     'PulseSpikeInitVmBySlopeMean', ...
     'PulseSpikeInitVmBySlopeMode', ...
     'PulseSpikeInitVmBySlopeSTD', ...
     'PulseSpikeInitVmMean', ...
     'PulseSpikeInitVmMode', ...
     'PulseSpikeInitVmSTD', ...
     'PulseSpikeMaxAHPMean', ...
     'PulseSpikeMaxAHPMode', ...
     'PulseSpikeMaxAHPSTD', ...
     'PulseSpikeMaxVmSlopeMean', ...
     'PulseSpikeMaxVmSlopeMode', ...
     'PulseSpikeMaxVmSlopeSTD', ...
     'PulseSpikeMinTimeMean', ...
     'PulseSpikeMinTimeMode', ...
     'PulseSpikeMinTimeSTD', ...
     'PulseSpikeRiseTimeMean', ...
     'PulseSpikeRiseTimeMode', ...
     'PulseSpikeRiseTimeSTD'};

recov_spike_tests  = ...
    {'RecovSpikeAmplitudeMean', ...
     'RecovSpikeAmplitudeMode', ...
     'RecovSpikeAmplitudeSTD', ...
     'RecovSpikeBaseWidthMean', ...
     'RecovSpikeBaseWidthMode', ...
     'RecovSpikeBaseWidthSTD', ...
     'RecovSpikeFallTimeMean', ...
     'RecovSpikeFallTimeMode', ...
     'RecovSpikeFallTimeSTD', ...
     'RecovSpikeHalfWidthMean', ...
     'RecovSpikeHalfWidthMode', ...
     'RecovSpikeHalfWidthSTD', ...
     'RecovSpikeFixVWidthMean', ...
     'RecovSpikeFixVWidthMode', ...
     'RecovSpikeFixVWidthSTD', ...     
     'RecovSpikeInitVmBySlopeMean', ...
     'RecovSpikeInitVmBySlopeMode', ...
     'RecovSpikeInitVmBySlopeSTD', ...
     'RecovSpikeInitVmMean', ...
     'RecovSpikeInitVmMode', ...
     'RecovSpikeInitVmSTD', ...
     'RecovSpikeMaxAHPMean', ...
     'RecovSpikeMaxAHPMode', ...
     'RecovSpikeMaxAHPSTD', ...
     'RecovSpikeMaxVmSlopeMean', ...
     'RecovSpikeMaxVmSlopeMode', ...
     'RecovSpikeMaxVmSlopeSTD', ...
     'RecovSpikeMinTimeMean', ...
     'RecovSpikeMinTimeMode', ...
     'RecovSpikeMinTimeSTD', ...
     'RecovSpikeRiseTimeMean', ...
     'RecovSpikeRiseTimeMode', ...
     'RecovSpikeRiseTimeSTD'};

ini_spont_tests = ...
    {'IniSpontISICV', ...
     'IniSpontPotAvg', ...
     'IniSpontSpikeRate', ...
     'IniSpontSpikeRateISI'};

pulse_rate_tests = ...
    {'PulseISICV', ...
     'PulseSFA', ...
     'PulseSFARatio', ...
     'PulseIni100msISICV', ...
     'PulseIni100msRest1SpikeRate', ...
     'PulseIni100msRest2SpikeRate', ...
     'PulseIni100msRest1SpikeRateISI', ...
     'PulseIni100msRest2SpikeRateISI', ...
     'PulseIni100msSpikeRate', ...
     'PulseIni100msSpikeRateISI', ...
     'PulsePotAvg', ...
     'PulseSpikeAmpDecayTau', ...
     'PulseSpikeAmpDecayDelta', ...
     'PulseSpontAmpRatio'};

pulse_hyper_pot_tests = ...
    {'PulsePotMin', ...
     'PulsePotMinTime', ...
     'PulsePotSag', ...
     'PulsePotSagDivMin', ...
     'PulsePotTau'};

recov_rate_tests = ...
    {'RecIniSpontPotRatio', ...
     'RecIniSpontRateRatio', ...
     'IniRecISIRatio', ...
     'RecSpont1SpikeRate', ...
     'RecSpont2SpikeRate', ...
     'RecSpont1SpikeRateISI', ...
     'RecSpont2SpikeRateISI', ...
     'RecSpontFirstISI', ...
     'RecSpontFirstSpikeTime', ...
     'RecSpontISICV', ...
     'RecSpontPotAvg'};

% spike tests: [ 0:5 9:11 15:17 21:35 42:44 ]

% Common for 40, 100, 200pA
depol_pulse_tests = ...
    { pulse_rate_tests{:}, recov_rate_tests{:}, pulse_spike_tests{:}};

% prepare to use by mergeMultipleCIPsInOne
merge_args = {...
  {'_H100pA', {'IniSpontSpikeRateISI', pulse_rate_tests{:}, pulse_hyper_pot_tests{:}, recov_rate_tests{:}, recov_spike_tests{:}}, ...
   '_0pA', { ini_spont_tests{:}, spont_spike_tests{:}}, ...
   '_D40pA', depol_pulse_tests, ...
   '_D100pA', {depol_pulse_tests{:}, recov_spike_tests{:}}, ...
   '_D200pA', depol_pulse_tests}, 'RowIndex_D200pA', ...
  struct('cipLevels', [-100 0 40 100 200])};

% remove input resistance cips and excessive columns before merging CIPs
% TODO: keep NumDuplicates? [no, messes up merging process]
phys_2_join_db = ...
    delColumns(phys_mean_db(phys_mean_db(:, 'pAcip', 1) <= -100 | ...
                            phys_mean_db(:, 'pAcip', 1) >= 0, :, :), ...
               {'NumDuplicates', 'RowIndex'});

% get the main values (TODO: merge pages using concat and swapRowsPages)

phys_joined_db = ...
    mergeMultipleCIPsInOne(phys_2_join_db(:, :, 1), merge_args{:});

% get the STDs
phys_joined_std_db = ...
    mergeMultipleCIPsInOne(phys_2_join_db(:, :, 2), merge_args{:});

% {'_H100pA', [5:14 19:24 (119 + spike_tests) 165], '_0pA', [1:3 (27 + spike_tests) 165], '_D40pA', [5:11 19:24 (73 + spike_tests) 165], '_D100pA', [5:11 14:16 19:24 (73 + spike_tests) (119 + spike_tests) 165], '_D200pA', [5:11 19:24 (73 + spike_tests) 165]}

num_params = get(phys_joined_db, 'num_params');
existing_rows = anyRows(phys_joined_db(:, 1:num_params), ...
                        phys_inputres_mean_db(:, 1:num_params, 1));

% Copy the existing rows
phys_joined_added_db1 = ...
    addColumns(onlyRowsTests(phys_joined_db, existing_rows, ':'), ...
	       {'InputResGOhm_HpA', 'InputCappF_HpA', ...
		'PulsePotTau_HpA'}, ...
	       get(onlyRowsTests(phys_inputres_mean_db, ':', {'InputResGOhm', 'InputCappF', ...
					 'PulsePotTau'}, 1), 'data'));

% Fill-in NaN for the non-existing rows
phys_joined_added_db2 = ...
    addColumns(onlyRowsTests(phys_joined_db, ~existing_rows, ':'), ...
	       {'InputResGOhm_HpA', 'InputCappF_HpA', ...
		'PulsePotTau_HpA'}, ...
	       repmat(NaN, length(find(~existing_rows)), 3));

% Combine all
phys_joined_added_db = [phys_joined_added_db1; phys_joined_added_db2];
clear phys_joined_added_db1 phys_joined_added_db2

% Get control DB
if isfield(props, 'drugCols')
  drug_cols = props.drugCols;
else
  drug_cols = {'TTX', 'Apamin', 'EBIO', 'XE991', 'Cadmium', 'drug_4AP'};
end
phys_joined_control_db = ...
    phys_joined_added_db(onlyRowsTests(phys_joined_added_db, ':', drug_cols) == ...
                         zeros(1, length(drug_cols)), :);

phys_joined_control_db = ...
    set(phys_joined_control_db, 'id', [phys_joined_control_db.id ' (control cells)']);

% all parameters kept here to access original traceset items
phys_db = phys_dball(:, 1:get(phys_dball, 'num_params'));

% create the bundle
a_pbundle = ...
    physiol_bundle({phys_dataset, phys_db, phys_joined_added_db}, struct('controlDB', phys_joined_control_db));
